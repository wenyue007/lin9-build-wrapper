#! /bin/bash -
#Owner: Jianwei.Hu@windriver.com

sendmail="sendmail_new.py"
bsp_val=""
barcode=""
bb_f="no"
full_args=$@
debug_y="no"
ovp_f="no"
cgl_f="no"
small_f="no"
multilib_f="no"
tpm_f="no"
sato_f="no"
dpdk_f="no"
kdump_f="no"
docker_f="no"
nodistro_f="no"
force_f="no"
next_f="no"
EXTRA_CMD="--accept-eula=yes"
EXTRA_templates="--templates "
EXTRA_layers="--layers "

#All supported bsp array
valid_bsp=(
amd-snowyowl
axxiaarm
axxiaarm64
bcm-2xxx-rpi
bcm-587xx
beaglebone
beaglebone-yocto
cav-octeontx
edgerouter
genericx86
genericx86-64
intel-broadwell-32
intel-broadwell-64
intel-haswell-32
intel-haswell-64
intel-kabylake-32
intel-kabylake-64
intel-skylake-32
intel-skylake-64
intel-skylake-avx512-32
intel-skylake-avx512-64
intel-socfpga
intel-socfpga-64
intel-socfpga-64b
intel-vmware-guest-32
intel-vmware-guest-64
intel-x86-32
intel-x86-64
marvell-armada-64
mpc8315e-rdb
nxp-imx6
nxp-imx7
nxp-imx8
nxp-ls1012
nxp-ls1046
nxp-ls10xx
nxp-ls20xx
nxp-lx2xxx
nxp-t4xxx
qemuarm
qemuarm64
qemuarma9
qemumips
qemumips64
qemuppc
qemux86
qemux86-64
qemux86copy
ti-66ak2xxx
ti-66ak2xxx-hf
ti-am335x
xilinx-zynq
xilinx-zynqmp
)

pre_config()
{
    #empty BBPATH in this sub-shell
    export BBPATH=""
}

barcode_check()
{
    for opt1 in $@
    do
        if grep '^[[:digit:]]*$' <<< "$opt1";then 
            num_5=`echo "$opt1" |awk -F "" '{print NF}'`
            if [ $num_5 -eq 5 ];then 
                barcode=$opt1
                break
            fi
        fi
    done
}

deploy_board()
{
    if [ -n "$barcode" ];then 
        echo "The barcode: $barcode,will deploy image on it..." 
        /folk/jhu2/scripts/vlm autocp $barcode |tee -a ../build.cmd
    else 
        echo 'No avaliable barcode, do nothing' | tee -a ../build.cmd
    fi
}

bsp_harvest()
{
    bsp_found=0
    num_bsp=`echo $bsp_val_org |awk -F" " '{print NF}'`
    for can_bsp in $bsp_val_org; do
        echo "Will validate $can_bsp ..."
        for bsp in ${valid_bsp[@]}; do
            if [ "$can_bsp" == "$bsp" ];then
                echo "<<< $can_bsp >>> is valid!!!"
                bsp_val=$can_bsp
                bsp_found=1
                break 2
            fi
        done    
    done
    if [[ $bsp_found -eq 0 && $num_bsp -eq 1 ]];then
         echo "<<<${bsp_val_org}>>> This is new machine name???"
         bsp_val=$bsp_val_org
    fi
    [ -z "$bsp_val" ] && echo "Please give one valid machine(bsp)!!!"
}

force_bsp_harvest()
{
    bsp_found=0
    active_bsp=`$DVD/setup.sh --list-machines --accept-eula yes|sed -n '/^--------------------/,$p'|sed 1d|awk -F" " '{print $1}'`
    for bsp in $active_bsp; do
        if [ "$bsp_val" == "$bsp" ];then
            echo "<<< $bsp_val >>> is valid online!!!"
            bsp_found=1
            break
        fi
    done    
    [ $bsp_found -eq 0 ] && bsp_val=""
    if [ -z "$bsp_val" ];then
        echo "Please give one valid online machine(bsp)!!!"
        echo "$active_bsp"
        usage
    fi
}

usage()
{
cat <<EOF

Usage:
$0 [lin9|lts17|lts18] bsp_machine [rt|std] cgl|ovp|nodistro|small|sato|multilib tpm|kdump|dpdk [none|bts|kts|ltp|us] [git|dvd] dry|deep|bb|cont|package
$0 hist
E.g.

$0 intel-x86-64 rt bts dvd

Note: cgl has std kernel by default.

lin9|lts17|lts18   product lines.

bsp_machine        supported bsp name, such as: qemux86-64 intel-x86-64 intel-skylake-avx512-64 nxp-ls1046.

rt|std             supported kernel types, rt:preempt-rt, std:standard.

cgl|ovp|sato|small distros:
                   wrlinux(wrlinux-image-glibc-std, default),
                   wrlinux-cgl(wrlinux-image-glibc-cgl, std kernel default),
                   wrlinux-ovp(wrlinux-image-ovp-kvm, no specified kernel, use default),
                   wrlinux-std-sato(wrlinux-image-glibc-std-sato),
                   wrlinux-small(wrlinux-image-glibc-small).

nodistro           distros:nodistro(core-image-base).

multilib           distros:wrlinux(lib32-wrlinux-image-glibc-std).

tpm|kdump|dpdk     add tpm/kdump/dpdk templates into setup.sh.

bts|kts|ltp|us     add testing layer into project, none is without such testing layer.

git|dvd            git uses git repo to setup project, dvd will use rcplXXXX to setup project.

dry|deep           debug mode, dry stop before setup.sh; deep stop before bitbake rootfs.

bb                 set BB_NO_NETWORK=0 in local.conf.

cont|package       when build fail first time, use cont to continue build after fixing issue manually;
                   use package to build packages which was changed in 5 days.

hist               show history commands.

last               execute last command.

help               show this usage.

force              online check machine(bsp) name 

scp|ostree         add ostree or scp related features

bye
EOF

exit 1
}

#This emit() will set your setting into conf/local.conf
emit()
{
    #for " emit ' XXX '
    #for ' emit " XXX "
cat << EOF >> conf/local.conf
$@
EOF
}


#If you want to add some extra packages into rootfs, please add below similar function.

#    echo "Will add $FUNCNAME into conf/local.conf"
#    echo "Adding $FUNCNAME into conf/local.conf..."
#    echo "Added $FUNCNAME into conf/local.conf"


image_install_append_iperf3()
{
    if [ X"$iperf_f" == X"yes" ];then
        echo "Will add $FUNCNAME into conf/local.conf"
        emit 'IMAGE_INSTALL_append = " iperf3"'
        echo "Added $FUNCNAME into conf/local.conf"
    fi
}

image_install_append_dpdk-examples-test()
{
    echo "Will add $FUNCNAME into conf/local.conf"
    if [ X"$dpdk_f" == X"yes" ];then
        echo "Adding $FUNCNAME into conf/local.conf..."
        emit 'IMAGE_INSTALL_append = " dpdk-examples dpdk-test"'
        echo "Added $FUNCNAME into conf/local.conf"
    fi
}

bb_network()
{
    if [ X"$bb_f" == X"yes" ];then
        emit 'BB_NO_NETWORK = "0"'
    fi
}
bug_workaround()
{
    echo "Will do bug workaround into conf/local.conf"
    #echo "BB_NO_NETWORK = '0'" >> conf/local.conf
    if [ X"$bsp_val" = X"nxp-ls1046_invalid" ];then
        emit '
BB_NO_NETWORK_pn-ppa = "0"
BB_NO_NETWORK_pn-fmlib = "0"
BB_NO_NETWORK_pn-fmc = "0"
        '
    fi

    if [ X"$testing_type" == X"us" ];then
        emit "
PNWHITELIST_networking-layer += 'samba'
PNWHITELIST_filesystems-layer += 'fuse'
PNWHITELIST_openembedded-layer += 'logwarn'
PNWHITELIST_openembedded-layer += 'inotify-tools'
PNWHITELIST_openembedded-layer += 'dfu-util'
PNWHITELIST_networking-layer += 'libtevent'
PNWHITELIST_openembedded-layer += 'openldap'
PNWHITELIST_networking-layer += 'libldb'
PNWHITELIST_networking-layer += 'libtdb'
        "
    fi

    bb_network

}

#If you want to add some extra options into setup.sh, please add below similar function.
select_template_docker()
{
    if [ X"$docker_f" == X"yes" ];then
        echo "Setting docker template..."
        EXTRA_templates=$EXTRA_templates" feature/docker "
    fi
}

select_template_kdump()
{
    if [ X"$kdump_f" == X"open_k" ];then
        echo "Setting kdump template..."
        EXTRA_templates=$EXTRA_templates" feature/kexec feature/kdump "
    fi
}

select_template_intel-persistent-memory()
{
    if [ X"$bsp_val" == X"intel-skylake-avx512-64" -a X"$product" == X"lts18" ];then
        echo "Setting intel-persistent-memory template..."
        EXTRA_templates=$EXTRA_templates" feature/intel-persistent-memory "
    fi
}

select_template_ostree()
{
    if [ X"$ostree_f" == X"yes" ];then
        echo "Setting ostree template..."
        EXTRA_templates=$EXTRA_templates" feature/ostree "
        EXTRA_layers=$EXTRA_layers" wr-ostree "
    fi
}

select_template_sb()
{
    if [ X"$sb_f" == X"yes" ];then
        echo "Setting efi-secure-boot template..."
        EXTRA_templates=$EXTRA_templates" feature/efi-secure-boot "
    fi
}

select_template_scp()
{
    if [ X"$scp_f" == X"yes" ];then
        echo "Setting scp template..."
        EXTRA_templates=$EXTRA_templates" feature/efi-secure-boot feature/encrypted-storage "
    fi
}

select_template_next()
{
    if [ X"$next_f" == X"yes" ];then
        echo "Setting linux-yocto-dev(next) template..."
        EXTRA_templates=$EXTRA_templates" feature/linux-yocto-dev "
    fi
}

select_template_tpm()
{
    if [ X"$tpm_f" == X"yes" ];then
        echo "Setting tpm template..."
        EXTRA_templates=$EXTRA_templates" feature/tpm2 "
    fi
}

select_template_zynqmp-secure-boot()
{
    if [ X"$zynqmp_f" == X"yes" ];then
        echo "Setting zynqmp-secure-boot layer..."
        EXTRA_layers=$EXTRA_layers" zynqmp-secure-boot "
    fi
}

select_template_dpdk()
{
    if [ X"$dpdk_f" == X"yes" ];then
        echo "Setting dpdk template and layer..."
        EXTRA_templates=$EXTRA_templates" feature/dpdk feature/bsp-extras "
        EXTRA_layers=$EXTRA_layers" meta-dpdk "
    fi
}

select_template_extra_us()
{
    if [ X"$testing_type" == X"us" ];then
        echo "Setting extra templates and layers for us testing layer..."
        EXTRA_templates=$EXTRA_templates" feature/LAMP feature/gdb feature/krb5 feature/lttng feature/ntp feature/system-stats feature/test feature/xfce "
        EXTRA_layers=$EXTRA_layers" meta-filesystems meta-virtualization meta-xfce "
    fi
}

select_template_bug_workaround_append()
{
    echo "Will do $FUNCNAME ..." 
    if [ X"$testing_type" == X"bts" ];then
        :
        #echo "Will add yaffs2 into bts ..." 
        #EXTRA_templates=$EXTRA_templates" feature/yaffs2-utils "
        #echo "Setting intel-persistent-memory template..."
        #EXTRA_templates=$EXTRA_templates" feature/intel-persistent-memory "
    fi
}

#Standard function from the following func.
# aaa
# bbb
# ccc
# ddd
# eee
remember_his()
{
    hist="/folk/`whoami`/.myhist"
    touch $hist
    #grep -w "$0 $bsp_val $kernel_val $testing_type" $hist
    grep -w "$0 $full_args" $hist &> /dev/null
    [ $? != 0 ] && echo "$0 $full_args" >> $hist
}

real_kernel()
{
    if [ "$ovp_f" = "yes" ];then
        kernel_val=""
    elif [ "$kernel_val" = "std" ];then
    #   kernel_val="linux-yocto-dev"
        if [ "$product" == "lin9" -o "$product" = "lin8" ];then
            kernel_val="standard"
        else
            kernel_val="linux-yocto"
        fi
    elif [ "$kernel_val" = "rt" ];then
        if [ "$product" == "lin9" -o "$product" = "lin8" ];then
            kernel_val="preempt-rt"
        else
            kernel_val="linux-yocto-rt"
        fi
    elif [ -z "$kernel_val" ];then
        if [ "$product" == "lin9" ];then
            kernel_val="standard"
        else
            kernel_val="linux-yocto"
        fi
    else
        echo "$kernel_val is wrong krenel type!!!MUST have [std|rt]"
        exit 1
    fi
    if [ "$next_f" = "yes" ];then
        kernel_val=""
    fi
}

us()
{
    echo "Doing userspace..."
    grep "userspace-test" conf/local.conf
    if [ $? -ne 0 ];then
        if [ X"$testing_type" == X"us" ];then
            cp /folk/jhu2/scripts/test_plan.list .
        fi
        bitbake-layers add-layer ${testing_layer}/userspace
        emit 'WRTEMPLATE_append = " feature/userspace-test "'
        emit 'IMAGE_ROOTFS_EXTRA_SPACE = "2242880"'
        emit 'IMAGE_FSTYPES_remove = " live"'
        echo "Appended userspace into conf/local.conf"
        echo "Will enable network to fetch package from somewhere..."
        bb_f="yes"
    else
        echo "userspace already existed"
    fi
}

kts()
{
    echo "Doing kts..."
    grep "wr-kts" conf/local.conf
    if [ $? -ne 0 ];then
        bitbake-layers add-layer ${testing_layer}/kts-dev
        emit "require templates/feature/wr-kts/template.conf"
        emit "BB_NO_NETWORK_pn-lmbench = '0'"
        echo "Appended wr-kts into conf/local.conf"
    else
        echo "wr-kts already existed"
    fi
}

ltp()
{
    echo "Doing ltp..."
    grep "ltp" conf/local.conf
    if [ $? -ne 0 ];then
        bitbake-layers add-layer ${testing_layer}/kts-dev
        emit "require templates/feature/ltp/template.conf"
        echo "Appended ltp into conf/local.conf"
    else
        echo "lpt already existed"
    fi
}

benchmark()
{
    echo "Doing benchmark..."
    grep "benchmark" conf/local.conf
    if [ $? -ne 0 ];then
        bitbake-layers add-layer ${testing_layer}/benchmark-dev
        emit "require templates/feature/benchmark/template.conf"
        echo "Appended benchmark into conf/local.conf"
    else
        echo "benchmark already existed"
    fi
}

bts()
{
    echo "Doing bts..."
    grep "bts" conf/local.conf
    if [ $? -ne 0 ];then
        bitbake-layers add-layer ${testing_layer}/bts-dev
        emit "require templates/feature/bts/template.conf"
        echo "Appended bts into conf/local.conf"
    else
        echo "bts already existed"
    fi
}

no_testing()
{
    echo "Clearing all testing layers..."
    sed "/templates\/feature\/wr-kts\/template.conf/d" conf/local.conf -i
    sed "/templates\/feature\/bts\/template.conf/d" conf/local.conf -i
    sed "/templates\/feature\/ltp\/template.conf/d" conf/local.conf -i
    sed "/BB_NO_NETWORK_pn-lmbench/d" conf/local.conf -i
}

inject_testing()
{
    echo "Setting testing layer: $testing_type ..."
    if [ "$testing_type" = "bts" -o "$testing_type" = "bsp" ];then
        bts
    elif [ "$testing_type" = "kts" ];then
        kts
    elif [ "$testing_type" = "ltp" ];then
        ltp
    elif [ "$testing_type" = "us" ];then
        us
    elif [ "$testing_type" = "bench" ];then
        benchmark
    elif [ "$testing_type" = "none" ];then
        echo "Without testing layer..."
    else
        echo "Not specified testing type,without any testing layers"
        testing_type="none"
        no_testing
    fi
}

product_select()
{
    case $product in
        lin8)
               DVD_path="/net/pek-hostel-deb04.wrs.com/buildarea1/nightly/WRL8/product_install/wrlinux-8"
               DVD_rcpl="/folk/lpg-build/cdc/fast_prod/wrlinux80RCPL/"
               ;;
        lin9)
               testing_layer="/net/pek-lpgtest15/buildarea1/jhu2/wrl9-testing/wr-testing"
               DVD_path="/net/pek-hostel-deb04.wrs.com/buildarea1/nightly/WRL9/product_install/wrlinux-9"
               DVD_rcpl="/folk/lpg-build/cdc/fast_prod/wrlinux90RCPL/"
               ;;
        lts17)
               testing_layer="/net/pek-lpgtest15/buildarea1/jhu2/wrl17-testing/wrlinux/wr-testing"
               DVD_path="/lpg-build/cdc/fast_prod/WRL10_17/WRL10_17_GIT/wrlinux-10"
               DVD_rcpl="/folk/lpg-build/cdc/fast_prod/WRL10_17/"
               ;;
        lts18)
               testing_layer="/net/pek-lpgtest15/buildarea1/jhu2/wrl18-testing/wrlinux/wr-testing"
               #DVD_base="/lpg-build/cdc/fast_prod/WRL10_18/"
               DVD_path="/lpg-build/cdc/fast_prod/WRL10_18/WRL10_18_GIT/wrlinux-10"
               DVD_rcpl="/folk/lpg-build/cdc/fast_prod/WRL10_18/"
               ;;
        lts19)
               testing_layer="/net/pek-lpgtest15/buildarea1/jhu2/wrlinux/wr-testing"
               DVD_path="/lpg-build/cdc/fast_prod/WRL10_19/WRL10_19_GIT/wrlinux-10"
               DVD_rcpl="/folk/lpg-build/cdc/fast_prod/WRL10_19/"
               ;;
        *)
               echo "please input correct product...[lin9|lts17|lts18|lts19]"
               exit 1
               ;;
     esac
}

git_dvd()
{
    wherego=${wherego:-"git"}
    
    if [ X"$wherego" == X"dvd" ];then
        echo "Will use DVD source..."
        if [ "$product" == "lin8" ];then
            DVD_1=`ls -lrt $DVD_rcpl| tail -1|awk -F" " '{print $NF}'`
            DVD_cmd="${DVD_1}/wrlinux/configure"
        elif [ "$product" == "lin9" ];then
            DVD_1=`ls -lrt $DVD_rcpl| tail -1|awk -F" " '{print $NF}'`
            DVD="${DVD_1}/wrlinux-9"
            read -n1 -t 10 -p "$DVD ???[y]";echo ""
            if [ X"$REPLY" = X"n" ];then
                read -t 300 -p "Please input your DVD path:" DVD_2
                [ -z "$DVD_2" ] && exit 1
                DVD="$DVD_2/"
                echo "Your DVD is: $DVD"
            else
                echo "Selected DVD: $DVD"
            fi
        else
            DVD_1=`ls -lrt $DVD_rcpl| tail -1|awk -F" " '{print $NF}'`
            [ -z "$DVD_1" ] && echo "No any RCPL found!!!" && exit 1
            DVD="${DVD_rcpl}${DVD_1}/wrlinux-10"
            read -n1 -t 10 -p "$DVD ???[y]";echo ""
            if [ X"$REPLY" = X"n" ];then
                read -t 300 -p "Please input your DVD path:" DVD_2
                [ -z "$DVD_2" ] && exit 1
                DVD="$DVD_2/"
                echo "Your DVD is: $DVD"
            else
                echo "Selected DVD: $DVD"
            fi
        fi
    else
        echo "Will use GIT source..."
        if [ "$product" == "lin8" ];then
            DVD_cmd="${DVD_path}/wrlinux/configure"
        else
            DVD=$DVD_path
        fi
    fi
}

select_dist_rootfs()
{
    if [ X"$cgl_f" = X"yes" ];then
        echo "Setting cgl distro..."
        distros_val="wrlinux-cgl"
        ROOTFS_TYPE="wrlinux-image-glibc-cgl"
    elif [ X"$ovp_f" = X"yes" ];then
        echo "setting ovp distro..."
        distros_val="wrlinux-ovp"
        ROOTFS_TYPE="wrlinux-image-ovp-kvm"
    elif [ X"$nodistro_f" = X"yes" ];then
        echo "setting nodistro..."
        distros_val="nodistro"
        ROOTFS_TYPE="core-image-base"
    elif [ X"$small_f" = X"yes" ];then
        echo "setting wrlinux-small distro..."
        distros_val="wrlinux-small"
        ROOTFS_TYPE="wrlinux-image-glibc-small"
    elif [ X"$sato_f" = X"yes" ];then
        echo "setting sato distro..."
        distros_val="wrlinux-std-sato"
        ROOTFS_TYPE="wrlinux-image-glibc-std-sato"
    elif [ X"$multilib_f" = X"yes" ]; then
        echo "Setting 32bit multilib wrlinux..."
        sleep 5
        distros_val="wrlinux"
        ROOTFS_TYPE="lib32-wrlinux-image-glibc-std"
    else
        echo "Setting base linux testing..."
        distros_val="wrlinux"
        ROOTFS_TYPE="wrlinux-image-glibc-std"
    fi

}

local_conf()
{
    echo "Will append some contents into conf/local.conf ..."
    if [ "$kernel_val" == "linux-yocto-rt-workaround" ];then
        emit 'PREFERRED_PROVIDER_virtual/kernel = "linux-yocto-rt"'
        emit 'PREFERRED_VERSION_linux-yocto-rt = "4.14%"'
    elif [ -n "$kernel_val" ];then
        if [ "$product" == "lin9" ];then
            emit "LINUX_KERNEL_TYPE = \"$kernel_val\""
        else
            emit "PREFERRED_PROVIDER_virtual/kernel = \"$kernel_val\""
        fi
    else
        echo "Will use default kernel value from conf/local.conf ..."
    fi
   #see select_template_tpm()
   # if [ X"$tpm_f" = X"yes" ];then
   #     echo "WRTEMPLATE_append = \"feature/tpm2\"" >> conf/local.conf 
   # fi
    find_me_in_local
    bug_workaround

    emit "BB_NUMBER_THREADS ?= \"24\""
    emit "PARALLEL_MAKE ?= \"-j 24\""

    [ X"`grep "IMAGE_ROOTFS_EXTRA_SPACE" conf/local.conf`" = X"" -a X"$testing_type" != X"none" ] && \
    emit 'IMAGE_ROOTFS_EXTRA_SPACE = "1024000"'
}

build_cmd_log()
{
    echo "Build log capture starting..."
    exec 6<&1 > build.cmd
    echo " "
    echo "$0 $full_args"
    echo " "
    echo "TEST_STEP"
    echo "$DVD/setup.sh --machines=$bsp_val --distros=$distros_val --dl-layers $EXTRA_full"
    [ "$product" != "lts19"  ] && echo ". ./environment-setup-x86_64-wrlinuxsdk-linux"
    echo ". ./oe-init-build-env build"
    if [ X"$testing_type" = X"bts" ];then
        echo "bitbake-layers add-layer ${testing_layer}/bts-dev"
        echo "echo require templates/feature/bts/template.conf >> conf/local.conf"
    elif [ X"$testing_type" = X"ltp" ];then
        echo "bitbake-layers add-layer ${testing_layer}/kts-dev"
        echo "echo require templates/feature/ltp/template.conf >> conf/local.conf"
    elif [ X"$testing_type" = X"us" ];then
        echo "bitbake-layers add-layer ${testing_layer}/userspace"
    elif [ X"$testing_type" = X"kts" ];then
        echo "bitbake-layers add-layer ${testing_layer}/kts-dev"
        echo "echo require templates/feature/wr-kts/template.conf >> conf/local.conf"
    fi
    [ -n "$kernel_val" ] && echo "echo PREFERRED_PROVIDER_virtual/kernel = \"$kernel_val\" >> conf/local.conf"
    echo "bitbake $ROOTFS_TYPE"
    echo " "
    exec 1<&6 6<&-
}

build_cmd_log_post()
{
    echo "Build log capture after inject_testing/local_conf..."
    echo "In conf/local.conf :" >> ../build.cmd
    sed -n '/^#jhu2 append as below:/,$p' conf/local.conf >> ../build.cmd
}

check_after_build()
{
    current_time=`date +%s%N`
    elapsing_time=$(($(($current_time - $start_time ))/60000000000))
    build_file=$1
    exec 6<&1 >> ../build.cmd
    echo " "
    echo "Filter error/warning from bitbake_build.log:"
    cat $build_file | grep -iE "^warning|^error" -b6
    echo " "
    echo "List all bb and bbappend in $testing_type"
    case "${testing_type}" in
        bts)
            find_p=${testing_layer}/bts-dev
            ;;
        kts)
            find_p=${testing_layer}/kts-dev
            ;;
        *)
            echo "Do nothing for non-bts/kts layer" 
            ;;
    esac
    #find $find_p -name "*bb*"
    echo " " 
    echo $elapsing_time mintues
    exec 1<&6 6<&-
}

get_build_pass()
{
    if [ -d ./tmp-glibc/buildstats ]; then
        new="`readlink -f $(find ./tmp-glibc/buildstats/ -name do_image_complete |grep -v initramfs |head -1 2>/dev/null) 2>/dev/null`"
        [ -z "$new" ] && new="FAILED"
    else
        new="FAILED"
    fi
}

build_next()
{
    pre_config
    [ "$product" != "lts19"  ] && . ./environment-setup-x86_64-wrlinuxsdk-linux
    . ./oe-init-build-env build

    emit " "
    emit "#jhu2 append as below:"

    inject_testing
    local_conf
    build_cmd_log_post
    
    [ X"$deepdry_y" == X"yes" ] && exit 0
    echo "bitbake $ROOTFS_TYPE"
    sleep 10
    bitbake $ROOTFS_TYPE 2>&1| tee bitbake_build.log
     
    check_after_build bitbake_build.log
    get_build_pass
}

cont_fast()
{
    [ -f build.cmd ] && ROOTFS_TYPE=`cat build.cmd | grep  "^bitbake "|awk -F" " '{print $2}'`
    ROOTFS_TYPE=${ROOTFS_TYPE:-wrlinux-image-glibc-std}
    echo "The ROOTFS_TYPE: $ROOTFS_TYPE"
    if [ ! -d build ]; then
       echo "Not found build dir, exit..." 
       exit 1
    else
        pre_config
        [ "$product" != "lts19"  ] && . ./environment-setup-x86_64-wrlinuxsdk-linux
        . ./oe-init-build-env build
        echo "bitbake $ROOTFS_TYPE"
        echo " " >> ../build.cmd
        echo " " >> ../build.cmd
        
        echo "After rebuild..." >> ../build.cmd
        echo "bitbake $ROOTFS_TYPE" >> ../build.cmd
        sleep 10
        bitbake $ROOTFS_TYPE 2>&1| tee bitbake_build_rebuild.log
        if [ ${PIPESTATUS[0]} -eq 0 ];then
            echo "Build $package ====> PASSED!"
            new="rebuild"
        else
            echo "Build $package ====> FAILED!"
            new="FAILED"
        fi

        check_after_build bitbake_build_rebuild.log
        testing_type="re"
        [ X"$new" != X"FAILED" ] && deploy_board 
        python ~/scripts/$sendmail "$new" "$testing_type"
   fi

}

build_pacakage()
{
    results_packages="\nSummary as below:"
    top_path=`readlink -f . 2>/dev/null`
    layers_path=`readlink -f layers 2>/dev/null`
    [ -z "$layers_path" ] && exit 1
    [ -f build.cmd ] && pre_lib32=`cat build.cmd |head -2 | grep  " multilib "`
    for meta in `ls $layers_path`
    do
        echo -n "In $layers_path/$meta ===>"
        cd $layers_path/$meta
        #changed_list=`git log --since=yesterday --pretty=oneline --numstat| grep -E "bb$|bbappend$"|awk -F"/" '{print $NF}'|sort|uniq`
        changed_list=`git log --since=${days}.days --pretty=oneline --numstat| grep -E "bb$|bbappend$"|awk -F"/" '{print $NF}'|sort|uniq`
        if [ -z "$changed_list" ];then
            :
            echo " N/A"
        else
            results_packages=${results_packages}"\nIn $layers_path/$meta ===>"
            echo " "
            echo "+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+"
            echo "$changed_list"
            cd $top_path
            pre_config
            [ "$product" != "lts19"  ] && . ./environment-setup-x86_64-wrlinuxsdk-linux
            . ./oe-init-build-env build &> /dev/null
            for package_ver in $changed_list
            do
                package=`echo $package_ver| awk -F"_" '{print $1}'`
                [  -n "$pre_lib32" ] && package="lib32-"${package}
                echo "bitbake $package"
                sleep 3
                bitbake -q $package 2>&1 | tee -a bitbake_build_packages.log
                if [ ${PIPESTATUS[0]} -eq 0 ];then
                    echo "Build $package ====> PASSED!"
                    results_packages=${results_packages}"\n   Build $package ====> PASSED!"
                else
                    echo "Build $package ====> FAILED!"
                    results_packages=${results_packages}"\n   Build $package ====> FAILED!"
                fi
            done
            echo "+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+"
        fi
        cd $layers_path
    done
    echo -e "$results_packages"
}

find_me_setup()
{
    echo "Will do smart find for appending extra templates/layers into setup.sh..."
    i=0
    for line in `eval declare |grep "^select_template_" | grep "()"`
    do
        echo $line | grep "select_template_" &>/dev/null
        if [ $? == 0 ];then
            case_name=`echo $line| awk -F"(" '{print $1}'`
            case_array[$i]=$case_name
            i=$(($i +1 ))
        else
           :
        fi
    done
    for sub_case in ${case_array[@]};
    do
        $sub_case
        sleep 1
    done
}

find_me_in_local()
{
    echo "Will do specified image append into conf/local.conf"
    i=0
    for line in `eval declare |grep "^image_install_append_" | grep "()"`
    do
        echo $line | grep "image_install_append_" &>/dev/null
        if [ $? == 0 ];then
            case_name=`echo $line| awk -F"(" '{print $1}'`
            case_array[$i]=$case_name
            i=$(($i +1 ))
        else
           :
        fi
    done
    for sub_case in ${case_array[@]};
    do
        $sub_case
        sleep 1
    done
}


verify_templates_layers()
{
    echo "Verifying appended templates and layers..."
    num_tem=`echo "$EXTRA_templates" |awk -F "" '{print NF}'`
    num_ly=`echo "$EXTRA_layers" |awk -F "" '{print NF}'`
    echo num_templates: $num_tem,$EXTRA_templates
    echo num_layers: $num_ly,$EXTRA_layers
    #echo "Formating the output..."
    #EXTRA_templates_new=`echo $EXTRA_templates |tr -s ' '`
    #EXTRA_layers_new=`echo $EXTRA_layers |tr -s ' '`
    #EXTRA_templates=$EXTRA_templates_new
    #EXTRA_layers=$EXTRA_layers_new
    [ $num_tem -eq 12 ] && EXTRA_templates=""
    [ $num_ly -eq 9 ] && EXTRA_layers=""
    if [ X"$nodistro_f" = X"yes" ];then
        EXTRA_templates=""
        EXTRA_layers=""
    fi
    num_tem=`echo "$EXTRA_templates" |awk -F "" '{print NF}'`
    num_ly=`echo "$EXTRA_layers" |awk -F "" '{print NF}'`
    echo "After formatting EXTRA_templates/EXTRA_layers..."
    echo num_templates: $num_tem,$EXTRA_templates
    echo num_layers: $num_ly,$EXTRA_layers
}

if [[ -z "$@" ]];then
    usage    
fi

start_time=`date +%s%N`
barcode_check $@
for opt1 in $@
do
    case $opt1 in
        cont)           
                      cont_fast
                      exit 0
                      ;;
        package*)           
                      days=$(echo $opt1 | awk -F"+" '{print $2}')
                      days=${days:-5}
                      build_pacakage
                      exit 0
                      ;;
        help)           
                      usage
                      ;;
        hist)           
                      cat /folk/`whoami`/.myhist
                      exit 0
                      ;;
        last)           
                      run_last=$(cat /folk/`whoami`/.myhist|tail -1)
                      echo $run_last
                      eval $run_last
                      exit 0
                      ;;
        dry)
                      dry_y="yes"
                      ;;
        deep)
                      deepdry_y="yes"
                      ;;
        lin8|lin9|lts17|lts18|lts19)
                      product=$opt1
                      ;;
        git|dvd)
                      wherego=$opt1
                      ;;
        bsp|bench|bts|kts|ltp|us|none)
                      testing_type=$opt1
                      ;;
        rt|std)
                      kernel_val=$opt1
                      ;;
        cgl)
                      cgl_f="yes"
                      kernel_val="std"
                      ;;
        ovp)
                      ovp_f="yes"
                      ;;
        multilib)
                      multilib_f="yes"
                      ;;
        tpm|tmp2)
                      tpm_f="yes"
                      ;;
        sato)
                      sato_f="yes"
                      ;;
        kdump)
                      kdump_f="open_k"
                      ;;
        docker)
                      docker_f="yes"
                      ;;
        iperf|iperf3)
                      iperf_f="yes"
                      ;;
        dpdk)
                      dpdk_f="yes"
                      ;;
        sb)
                      sb_f="yes"
                      ;;
        zyn_sb)
                      zynqmp_f="yes"
                      ;;
        scp)
                      scp_f="yes"
                      ;;
        ostree)
                      ostree_f="yes"
                      ;;
        small)
                      small_f="yes"
                      ;;
        nodistro)
                      nodistro_f="yes"
                      ;;
        bb)
                      bb_f="yes"
                      ;;
        [0-9]*[0-9])
                      barcode="$opt1"
                      ;;
        force)
                      force_f="yes"
                      ;;
        next)
                      next_f="yes"
                      ;;
        ultimate|*)
                      bsp_val_org+="$opt1 "
                      ;;
    esac
done

bsp_harvest
[ -z "$bsp_val" ] && usage
#start from here
remember_his
product_select
real_kernel
git_dvd

if [ "$product" == "lin8" ];then
    echo "$DVD_cmd --enable-board=$bsp_val --enable-kernel=$kernel_val --enable-rootfs=glibc-std --enable-reconfig=yes"
    $DVD_cmd --enable-board=$bsp_val --enable-kernel=$kernel_val --enable-rootfs=glibc-std --enable-reconfig=yes
    make fs 2>&1| tee make_fs_build.log
    echo Done
    exit    
fi

[ "$force_f" == "yes" ] && force_bsp_harvest

find_me_setup

select_dist_rootfs

verify_templates_layers

EXTRA_full=`echo $EXTRA_templates $EXTRA_layers $EXTRA_CMD|tr -s ' '`
build_cmd_log

echo "$DVD/setup.sh --machines=$bsp_val --distros=$distros_val --dl-layers $EXTRA_full"
if [ X"$dry_y" = X"yes" ]; then
    cat build.cmd
else
    eval "$DVD/setup.sh --machines=$bsp_val --distros=$distros_val --dl-layers $EXTRA_full"
    [ $? -eq 0 ] && build_next
    [ -z "$testing_type" ] && testing_type="No_Testing_Suites"
    [ X"$new" != X"FAILED" ] && deploy_board 
    python /folk/jhu2/scripts/$sendmail "$new" "$testing_type"
fi

echo "Done"
